{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","passageRef","useRef","questionRef","_useState","useState","_useState2","Object","slicedToArray","answer","setAnswer","_useState3","_useState4","model","setModel","loadModel","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","loadedModel","wrap","_context","prev","next","qna","sent","console","log","stop","apply","this","arguments","useEffect","answerQuestion","_ref2","_callee2","e","passage","question","answers","_context2","which","current","value","findAnswers","_x","react_default","a","createElement","className","esm","color","width","height","react","ref","columns","onKeyPress","size","map","ans","idx","text","Math","floor","score","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.1ecf55c6.chunk.js","sourcesContent":["import React from 'react'\n// import ReactDOM from 'react-dom'\n\n\nimport * as tf from \"@tensorflow/tfjs\"\nimport * as qna from \"@tensorflow-models/qna\"\nimport * as loader from 'react-loader-spinner'\nimport { useEffect, useState, useRef, Fragment } from 'react';\n\nfunction App() {\n  // Initialization and Setup Part\n\n  // refrences setup\n  const passageRef = useRef(null);\n  const questionRef = useRef(null);\n  // Creating Model Loading state and answer holding state \n  // as model is large we shouldn't load again and again better hold it\n  const [answer, setAnswer] = useState();\n  const [model, setModel] = useState(null);\n\n\n\n  // Load Model\n  const loadModel = async () => {\n    const loadedModel = await qna.load()\n    setModel(loadedModel);\n    console.log(\"Model Loaded!!\")\n\n  }\n\n  // running the function only once when application starts up\n  useEffect(() => { loadModel() }, [])\n\n\n  // Handling Qustions\n  const answerQuestion = async (e) => {\n    if (e.which === 13 && model !== null) { // if key pressed is ENTER(13)  and model is not null(isloded) go ahead!\n      console.log(\"Quenstion Submitted...\")  // user asked a question\n      const passage = passageRef.current.value // grabing passage value\n      const question = questionRef.current.value // grabbing question\n      console.log(\"The Ques Was:-->  \"+question)\n      const answers = await model.findAnswers(question, passage)\n      console.log(\"Answers\")\n      setAnswer(answers)\n      console.log(answers)\n      console.log(\"one\")\n    }\n  }\n\n\n\n\n\n\n\n\n\n  // Return Part\n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n\n         {  model == null?\n            <div className='load'>\n              <div className=\"main-heading\"><div className='load-heading'>Loading Model</div></div>\n              <loader.Circles color=\"#00BFFF\"  width={300} height={300}/>\n            </div>\n            :\n\n            // if model has loaded\n            <Fragment>\n              <div className=\"main-heading\"><div className='head'>Passage</div></div> \n              <textarea ref={passageRef}  columns='100'></textarea> \n              <div className='head'>Ask a Question From The Passage</div>\n              <input ref={questionRef} onKeyPress={answerQuestion} size='80'></input>\n               <div className=\"head\">Answer</div>\n               <div className=\"ans\">\n              {answer ? answer.map((ans,idx) => <div >Answer {idx+1} - {ans.text} ({Math.floor(ans.score*100)/100}) </div>):\"\"}\n              </div>\n            </Fragment>\n\n\n        }\n        \n      </header >\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}